Description: | 
  This template creates an EC2 instance and pre-configures it to run TiddlyWiki on NodeJs. 
  !WARNING! You will be billed for the AWS resources used if you create a stack from this template.
  Be sure to review your billing estimates to avoid any nasty surprises!
  Guide to install TiddlyWiki:
  https://tiddlywiki.com/static/Installing%2520TiddlyWiki%2520on%2520Node.js.html
  TiddlyWiki startup commands:
  https://tiddlywiki.com/static/ListenCommand.html

Parameters:
  InstanceName:
    Description: The name of your EC2 instance
    Type: String
    Default: TiddlyWiki
  InstanceType:
    Description: Choose an instance to host TiddlyWiki on
    Type: String
    Default: t2.nano
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. If there are no options available, head over to EC2 => Key Pairs and create one.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instance
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Route53HostedZone:
    Description: Select the domain you want this wiki to be associated with.
    Type: AWS::Route53::HostedZone::Id
    ConstraintDescription: Must be a valid domain
  UrlName:
    Description: |
      This will set the subdomain. Type out the fully qualified url. 
      For example, if your hosted zone domain name is yourdomain.com, type wiki.yourdomain.com. 
      Where 'wiki' is whatever you want to call the subdomain.
    Type: String
    Default: wiki.example.com
    ConstraintDescription: Must be a valif String

Resources:
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP access via port 8080 + SSH access"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0      
        FromPort: '8080'
        IpProtocol: tcp
        ToPort: '8080'
      - CidrIp: 0.0.0.0/0      
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: !Ref SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
  TiddlyWikiInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - 
          Key: Name
          Value: !Ref InstanceName
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-0bbc25e23a7640b9b
      SecurityGroups:
        - !Ref ServerSecurityGroup
      UserData:
        Fn::Base64: |
           #!/bin/bash
           yum update -y
           yum install -y gcc-c++ make
           curl -sL https://rpm.nodesource.com/setup_11.x | sudo -E bash -
           yum install -y nodejs
           npm install -g tiddlywiki
           #sudo tiddlywiki wikiwiki --init server
           ##sudo tiddlywiki wikiwiki --listen host=0.0.0.0 port=8080 port=80 username=admin password=admin
           #wget https://raw.githubusercontent.com/Juan007/cloudformation/master/TiddlyWiki/tiddlywikistartup -O /etc/init.d/tiddlywikistartup
           #chmod +x /etc/init.d/tiddlywikistartup
           #shutdown -r now
  Url:
    Type: AWS::Route53::RecordSet
    Properties:      
      Comment: DNS name for my instance.
      Name: !Ref UrlName
      HostedZoneId: !Ref Route53HostedZone
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt TiddlyWikiInstance.PublicIp